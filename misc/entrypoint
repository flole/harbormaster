#!/usr/bin/env bash
set -euo pipefail

# This script is the entrypoint for the container Harbormaster itself is deployed in.
#
# Because Harbormaster starts other Docker apps with Compose, it specifies some paths to
# mount the apps' data on. However, because of the way Docker works, those paths are
# actually *on the host*, and not inside this container.
#
# That means that Harbormaster must know the path on the host that it's mounted in, so it
# can pass it on to the apps it manages. The way we do that is by using `docker inspect`
# to inspect our own running container and see what we were run with.
#
# It's a lot of hackery, but that just mirrors life.


# Find the mount whose destination starts with `/main` and use that as the host data
# path. We do this by searching for the mountpoint of type `bind` (not `volume`, as
# that's what Docker uses when the volume was omitted) and that starts with `/main`.
MOUNTS=$(docker inspect "$HOSTNAME" -f '{{range .Mounts }}{{ .Type }} {{ .Destination }} {{ .Source }}{{ printf "\n" }}{{ end }}')
HOST_MOUNT=$(echo "$MOUNTS" | awk '/^bind \/main/ {print $3}')

if [ -n "$HOST_MOUNT" ]; then
    echo "HARBORMASTER_HOST_DATA=$HOST_MOUNT" > /root/project_env.sh
else
    echo "Harbormaster error: /main volume not mounted properly, cannot continue."
    exit 1
fi

# Run Harbormaster once before starting cron, because cron waits until it's time before
# it actually runs anything, which is bad UX.
run-harbormaster

crond -f -l 1
