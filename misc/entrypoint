#!/usr/bin/env bash
set -euo pipefail

# This script is the entrypoint for the container Harbormaster itself is deployed in.
#
# Because Harbormaster starts other Docker apps with Compose, it specifies some paths to
# mount the apps' data on. However, because of the way Docker works, those paths are
# actually *on the host*, and not inside this container.
#
# That means that Harbormaster must know the path on the host that it's mounted in, so it
# can pass it on to the apps it manages. The way we do that is by using `docker inspect`
# to inspect our own running container and see what we were run with.
#
# It's a lot of hackery, but that just mirrors life.


# Find the mount whose destination starts with `/main` and use that as the host data
# path. We do this by searching for the mountpoint of type `bind` (not `volume`, as
# that's what Docker uses when the volume was omitted) and that starts with `/main`.
MOUNTS=$(docker inspect "$HOSTNAME" -f '{{range .Mounts }}{{ .Type }} {{ .Destination }} {{ .Source }}{{ printf "\n" }}{{ end }}')
MAIN_MOUNT=$(echo "$MOUNTS" | awk '/^bind \/main/ {print $3}')

# Do the same for /config
CONFIG_MOUNT=$(echo "$MOUNTS" | awk '/^bind \/config/ {print $3}')

if [ -n "$MAIN_MOUNT" ]; then
    echo "export HARBORMASTER_HOST_DATA=$MAIN_MOUNT" > /root/project_env.sh
    echo "export HARBORMASTER_HOST_CONFIG=$CONFIG_MOUNT" >> /root/project_env.sh
else
    echo "Harbormaster error: /main volume not mounted properly, cannot continue."
    exit 1
fi

# Since we need the directories inside the HM container to be the same as the ones
# outside, the easiest way was to create the same structure as the host and symlink
# /main there. This way, the inside of the HM container should look to Docker exactly
# like the outside.
PARENT_DIR="${MAIN_MOUNT%/*}"
SUB_DIR="${MAIN_MOUNT##*/}"

# Check if directory exists
if [ -d "$MAIN_MOUNT" ]; then
   echo "There was an error, the directory $MAIN_MOUNT already exists in the container."
   echo "Since Harbormaster does some internal trickery to map the host's directory"
   echo "structure inside its own container, this means that you can't use a directory"
   echo "name outside the container that also exists inside."
   echo ""
   echo "I'm afraid you've hit a rare limitation, you'll have to move or rename your"
   echo "Harbormaster data directory to something else on your computer."
   exit 1
else
    # Create parent directories up to one level before
    mkdir -p "$PARENT_DIR"

    # Echo remaining directory
    ln -s /main "$PARENT_DIR"/"$SUB_DIR"
fi


# Run Harbormaster once before starting cron, because cron waits until it's time before
# it actually runs anything, which is bad UX.
run-harbormaster

if command -v webhook >/dev/null 2>&1; then
    echo "Starting webhook server..."
    webhook -hooks /hooks.json -verbose &
fi
